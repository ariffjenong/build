env:
    rclone_config: "ENCRYPTED[4922bc14514c7f61d60c12b9e1f9bf4d93bd95dc0ea4f51a5569580948e8404a427dd178aa07413e6fbd784459a0c828]"
    TG_TOKEN: "ENCRYPTED[7888fd688129c58fcd9a25086dad02a0c103986cfca92f0d1606b3873ab2e02fffacffe4a8a432b0d726eff81999323e]"
    TG_CHAT_ID: "ENCRYPTED[e06537f430d3e1dfd6bd23c324f9f5d0ac0a67807e496b194aa1a1bfb4c4a8aae6b6eb77bdcb5ae2f043b9b09cc00bc5]"
    SF_USERNAME: "ENCRYPTED[9b9deac88b090b7dc4e69a058e79360e8832c782b9bd46499a7f1401e66e219bad7c9c901a85eeb0d154f717cfc5f148]"
    SF_PASS: "ENCRYPTED[9d4e6509f1294d4d9b39c9f092f32123bef7cdf2c773cda6f80867a329c629d6ab9f1cee0db0c38184bd13d8e8a5556f]"
    ROM_PROJECT: "nad-12"
 
task:
  name: "Setting Up, Syncing, Building and Uploading..."
  timeout_in: 4h  
  container:
      image: inok2341/anu:latest
      cpu: 8
      memory: 32G

  Env_script:
      - cd ~
      - mkdir -p ~/rom
      - mkdir -p ~/znxt
      - mkdir -p ~/.config/rclone
      - echo "$rclone_config" > ~/.config/rclone/rclone.conf
      - time rclone copy znxt:ccache/nad12/ccache.tar.gz ~/znxt -P
      - cd ~/znxt
      - time tar xf ccache.tar.gz
      - rm -rf ccache.tar.gz

  Sync_script:
      - set -e
      - rom_name=$(grep init sync_source.sh -m 1 | cut -d / -f 4)
      - branch_name=$(grep init sync_source.sh | awk -F "-b " '{print $2}' | awk '{print $1}')
      - command=$(head sync_source.sh -n $(expr $(grep 'build/envsetup.sh' sync_source.sh -n | cut -f1 -d:) - 1))
      - only_sync=$(grep 'repo sync' sync_source.sh)

      - for item in "LineageOS lineage-17.1" "LineageOS lineage-15.1" "LineageOS lineage-19.0" "ArrowOS arrow-12.0" "Project-Fluid fluid-12" "CipherOS twelve" "ProjectRadiant twelve" "Project-Awaken 12" "Octavi-OS 12" "Project-LegionOS 12" "ShapeShiftOS android_12" "lighthouse-os sailboat" "Evolution-X snow" "PotatoProject frico-release" "StyxProject S" "PixelExperience twelve" "CherishOS twelve" "Spark-Rom spark" "PixelExtended snow" "Corvus-R 12" "crdroidandroid 12.0" "AospExtended 12.x" "NusantaraProject-ROM 12" "ProjectSakura 12" "ForkLineageOS lineage-19.0"
       
      - do
      - item1=$(echo $item | awk -F ' ' '{print $1}')
      - item2=$(echo $item | awk -F ' ' '{print $2}')
      - if [[ $rom_name == $item1 ]]; then if [[ $branch_name == $item2 ]]; then rom_name=$rom_name-$branch_name; fi ;fi
      - done

      - mkdir -p ~/rom/$rom_name
      - cd ~/rom/$rom_name
      - rm -rf .repo/local_manifests
      - bash -c "$command" || true
       

      - set -exv
      - curl -sO https://api.cirrus-ci.com/v1/task/$CIRRUS_TASK_ID/logs/sync.log
      - a=$(grep 'Cannot remove project' sync.log -m1|| true)
      - b=$(grep "^fatal: remove-project element specifies non-existent project" sync.log -m1 || true)
      - c=$(grep 'repo sync has finished' sync.log -m1 || true)
      - d=$(grep 'Failing repos:' sync.log -n -m1 || true)
      - e=$(grep 'fatal: Unable' sync.log || true)
      - if [[ $a == *'Cannot remove project'* ]]
      - then
      - a=$(echo $a | cut -d ':' -f2)
      - rm -rf $a
      - rm -rf .repo/project-objects/$a.git
      - rm -rf .repo/projects/$a.git
      - repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
      - elif [[ $b == *'remove-project element specifies non-existent'* ]]
      - then exit 1
      - elif [[ $c == *'repo sync has finished'* ]]
      - then true
      - elif [[ $d == *'Failing repos:'* ]]
      - then
      - d=$(expr $(grep 'Failing repos:' sync.log -n -m 1| cut -d ':' -f1) + 1)
      - d2=$(expr $(grep 'Try re-running' sync.log -n -m1 | cut -d ':' -f1) - 1 )
      - fail_paths=$(head -n $d2 sync.log | tail -n +$d)
      - for path in $fail_paths
      - do
      - rm -rf $path
      - rm -rf .repo/project-objects/$path.git
      - rm -rf .repo/projects/$path.git
      - done
      - repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
      - elif [[ $e == *'fatal: Unable'* ]]
      - then
      - fail_paths=$(grep 'fatal: Unable' sync.log | cut -d ':' -f2 | cut -d "'" -f2)
      - for path in $fail_paths
      - do
      - rm -rf $path
      - rm -rf .repo/project-objects/$path.git
      - rm -rf .repo/projects/$path.git
      - done
      - repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
      - else
     #- (repo forall -c 'git checkout .' && bash -c "$only_sync") || (find -name shallow.lock -delete && find -name index.lock -delete && bash -c "$only_sync")
      - exit 1
      - fi
      - rm -rf sync.log


  Build_script:
      - ./build.sh

  Upload_file_script:
      - ./build_zip.sh
      - kernel=~/rom/$rom_name/out/target/product/maple_dsds/obj/KERNEL_OBJ/arch/arm64/boot/Image.gz-dtb
      - curl -F document=@$kernel https://api.telegram.org/TG_TOKEN/sendDocument?chat_id=TG_CHAT_ID && cd ~/rom/$rom_name/out/target/product/maple_dsds
      - ls -lh
      - product=$(ls *maple_dsds*UNOFFICIAL*.zip)
      - rclone copy $product znxt:maple_dsds/nad

  SF_script:
      - ./sf.sh
      - curl -s https://api.telegram.org/$TG_TOKEN/sendMessage -d chat_id=$TG_CHAT_ID -d text="Build $product Uploaded Successfully!"
  
